import os
import requests
import json
from user_agent import generate_user_agent as gg # ูุชูููุฏ User-Agent ุฏููุงูููู
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ConversationHandler
from telegram.constants import ParseMode # ูุงุณุชุฎุฏุงู Markdown/HTML ูู ุงูุฑุณุงุฆู

# --- ุฅุนุฏุงุฏุงุช ุงูุจูุช ---
# ูู ุจุชุบููุฑ ูุฐุง ุจู Bot Token ุงูุฎุงุต ุจู ูู BotFather
# ููุถู ุชุญูููู ููุชุบูุฑ ุจูุฆุฉ (environment variable) ูุฃูุงู ุฃูุถู
BOT_TOKEN = os.getenv("7332424799:AAGWLtN942LEWbxtlBnxF-fk4pQp2GVP-QM", "ุถุน_ุฑูุฒ_ุชููู_ุงูุจูุช_ุงูุฎุงุต_ุจู_ููุง")

# ุชุนุฑูู ุงูุญุงูุงุช ููุญุงุฏุซุฉ ุงูุจูุช
CHOOSING_ACTION, TYPING_PROMPT_AI1, TYPING_PROMPT_AI2, TYPING_PROMPT_IMAGE = range(4)

# --- ุฏูุงู ุงุณุชุฏุนุงุก APIs ุงูุฐูุงุก ุงูุงุตุทูุงุนู ---

async def call_ai_type1(user_message: str) -> str:
    """
    ูุชุตู ุจู API aicodegenerator.ifscswiftcodeapp.in ูุชูููุฏ ุงููุตูุต.
    ููุงุญุธุฉ: ูุฐุง ุงูู API ูุนุชูุฏ ุนูู ููููุฒ ูููุฏุฑุงุช ูุญุฏุฏุฉ ููุฏ ูุง ูููู ูุณุชูุฑุงู ุฃู ูุตููุงู ููุงุณุชุฎุฏุงู ุงูุนุงู.
    """
    cookies = {
        '_ga': 'GA1.1.677392249.1751447114',
        '_ga_D0G2X82ND0': 'GS2.1.s1751447113$o1$g1$t1751447119$j54$l0$h0',
        '_ga_3FXGGN6M9L': 'GS2.1.s1751447113$o1$g1$t1751447119$j54$l0$h0',
    }

    headers = {
        'accept': '*/*',
        'accept-language': 'en-US,en;q=0.9,ar;q=0.8',
        'content-type': 'application/json',
        'origin': 'https://aicodegenerator.ifscswiftcodeapp.in',
        'priority': 'u=1, i',
        'referer': 'https://aicodegenerator.ifscswiftcodeapp.in/',
        'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-origin',
        'user-agent': gg(), # ุชูููุฏ User-Agent ุฏููุงูููู
    }

    json_data = {
        'message': [
            {'type': 'text', 'text': user_message},
        ],
        'chatId': '175144712783', # ูุฐุง ุงูู chatId ุซุงุจุชุ ูุฏ ุชุญุชุงุฌ ุฅูู ุชุบููุฑู ุฃู ุฌุนูู ุฏููุงููููุงู ุฅุฐุง ูุงู ุงูู API ูุชุทูุจ ุฐูู
        'generatorType': 'CodeGenerator', # ุญุชู ูู ูุงู ูู "ุฃู ุดูุก" ููุง ุฃุดุฑุช
    }

    try:
        response = requests.post(
            'https://aicodegenerator.ifscswiftcodeapp.in/api.php',
            cookies=cookies,
            headers=headers,
            json=json_data,
            timeout=15 # ุชุญุฏูุฏ ูููุฉ ููุทูุจ
        ).json()
        return response.get('response', 'ูุดู ูู ุงูุญุตูู ุนูู ุงุณุชุฌุงุจุฉ ูู API ุงูุฃูู.')
    except requests.exceptions.RequestException as e:
        return f"ุญุฏุซ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจู API ุงูุฐูุงุก ุงูุงุตูุงุนู ุงูุฃูู: {e}"
    except json.JSONDecodeError:
        return "ุญุฏุซ ุฎุทุฃ ูู ุชุญููู ุงุณุชุฌุงุจุฉ API ุงูุฐูุงุก ุงูุงุตูุงุนู ุงูุฃูู."

async def call_ai_type2(user_message: str) -> str:
    """
    ูุชุตู ุจู API api4dev.ir/ai/ ูุชูููุฏ ุงููุตูุต.
    """
    try:
        # ุงุณุชุฎุฏุงู requests.utils.quote ูุชุฑููุฒ ุงููุต ููุงุณุชุฎุฏุงู ูู URL
        return requests.get(
            f"http://api4dev.ir/ai/?text={requests.utils.quote(user_message)}",
            timeout=8
        ).text
    except requests.exceptions.RequestException as e:
        return f"โุนุทู ูู ุงูุงุชุตุงู ุจู API ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงูุซุงูู: {e}"

async def generate_image(prompt: str) -> str:
    """
    ูุชุตู ุจู API http://185.158.132.66:2010/api/tnt/tnt-black-image ูุชูููุฏ ุงูุตูุฑ.
    """
    headers = {'Content-Type': 'application/json'} # ุชุญุฏูุฏ ุฃู ููุน ุงููุญุชูู ูู JSON
    json_data = { "User-Prompt": prompt }

    try:
        response = requests.post(
            "http://185.158.132.66:2010/api/tnt/tnt-black-image",
            headers=headers,
            json=json_data,
            timeout=30 # ูููุฉ ุฃุทูู ูุชูููุฏ ุงูุตูุฑ
        ).json()

        # *** ูุงู ุฌุฏุงู: ุณุชุญุชุงุฌ ูุชุนุฏูู ูุฐุง ุงูุฌุฒุก ุจูุงุกู ุนูู ุงูุงุณุชุฌุงุจุฉ ุงููุนููุฉ ูู API ุงูุตูุฑ ***
        # ุงูุชุฑุถ ุฃู ุงูู API ูุฑุฌุน URL ุงูุตูุฑุฉ ูู ููุชุงุญ 'imageUrl' ุฃู 'url' ุฃู 'image'
        if 'imageUrl' in response:
            return response['imageUrl']
        elif 'url' in response:
            return response['url']
        elif 'image' in response:
            return response['image']
        else:
            # ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูููุชุงุญ ุงููุชููุนุ ุงุทุจุน ุงูุงุณุชุฌุงุจุฉ ุงููุงููุฉ ูููุณุงุนุฏุฉ ูู ุงูุชุตุญูุญ
            print(f"Image API response missing expected key: {json.dumps(response, indent=2)}")
            return "ูู ูุชู ุงูุนุซูุฑ ุนูู ุฑุงุจุท ุงูุตูุฑุฉ ูู ุงูุงุณุชุฌุงุจุฉ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ุฃู ุงูุฅุจูุงุบ ุนู ุงููุดููุฉ."

    except requests.exceptions.RequestException as e:
        return f"ุญุฏุซ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจู API ุชูููุฏ ุงูุตูุฑ: {e}"
    except json.JSONDecodeError:
        return "ุญุฏุซ ุฎุทุฃ ูู ุชุญููู ุงุณุชุฌุงุจุฉ API ุชูููุฏ ุงูุตูุฑ."

# --- ุฏูุงู ูุนุงูุฌุฉ ุฃูุงูุฑ ุงูุจูุช ---

async def start(update: Update, context) -> int:
    """
    ูุฑุณู ุฑุณุงูุฉ ุงูุจุฏุก ุงูุฌูููุฉ ูุน ุงูุฃุฒุฑุงุฑ.
    """
    user = update.effective_user
    welcome_message = (
        f"๐ *ูุฑุญุจุงู ุจู ูุง {user.first_name}!* ๐\n\n"
        "ุฃูุง ุจูุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงููุชุทูุฑ ุงูุฎุงุต ุจูุ ุฌุงูุฒ ูููุณุงุนุฏุฉ ูู ูู ูุง ุชุญุชุงุฌ!\n\n"
        "ุงุฎุชุฑ ุฃุญุฏ ุงูุฎูุงุฑุงุช ุฃุฏูุงู ูุชุจุฏุฃ:"
    )

    keyboard = [
        [
            InlineKeyboardButton("โจ ุฐูุงุก ุงุตุทูุงุนู (ุงูููุน 1)", callback_data='ai_type1'),
            InlineKeyboardButton("๐ฎ ุฐูุงุก ุงุตุทูุงุนู (ุงูููุน 2)", callback_data='ai_type2'),
        ],
        [
            InlineKeyboardButton("๐ผ๏ธ ุชูููุฏ ุตูุฑุฉ", callback_data='generate_image'),
        ],
        [
            InlineKeyboardButton("โ ุฅูุบุงุก", callback_data='cancel'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    return CHOOSING_ACTION # ููุชูู ุฅูู ุญุงูุฉ ุงุฎุชูุงุฑ ุงูุฅุฌุฑุงุก

async def button_callback(update: Update, context) -> int:
    """
    ูุชุนุงูู ูุน ุถุบุทุงุช ุงูุฃุฒุฑุงุฑ ุงููุถููุฉ.
    """
    query = update.callback_query
    await query.answer() # ูุฌุจ ุงุณุชุฏุนุงุก query.answer() ูุฅููุงุก ุงูุงุณุชุนูุงู

    action = query.data

    if action == 'ai_type1':
        context.user_data['selected_ai_type'] = 'ai_type1'
        await query.edit_message_text(
            "๐ *ุฃุญุณูุช!* ููุฏ ุงุฎุชุฑุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงูููุน 1.\n"
            "ุงูุขูุ ุฃุฑุณู ูู ุทูุจู ุฃู ุณุคุงูู ุงูุฐู ุชุฑูุฏ ุฃู ุฃุฌูุจ ุนููู."
            "\n\nุฃู ููููู ุงุณุชุฎุฏุงู /cancel ููุฅูุบุงุก."
            , parse_mode=ParseMode.MARKDOWN
        )
        return TYPING_PROMPT_AI1

    elif action == 'ai_type2':
        context.user_data['selected_ai_type'] = 'ai_type2'
        await query.edit_message_text(
            "๐ *ููุชุงุฒ!* ููุฏ ุงุฎุชุฑุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงูููุน 2.\n"
            "ุงูุขูุ ุฃุฑุณู ูู ุทูุจู ุฃู ุณุคุงูู ุงูุฐู ุชุฑูุฏ ุฃู ุฃุฌูุจ ุนููู."
            "\n\nุฃู ููููู ุงุณุชุฎุฏุงู /cancel ููุฅูุบุงุก."
            , parse_mode=ParseMode.MARKDOWN
        )
        return TYPING_PROMPT_AI2

    elif action == 'generate_image':
        context.user_data['selected_ai_type'] = 'image_gen'
        await query.edit_message_text(
            "๐จ *ุฑุงุฆุน!* ููููู ุงูุขู ุฃู ุชุทูุจ ููู ุชูููุฏ ุตูุฑุฉ.\n"
            "ุงูุฑุฌุงุก ูุตู ุงูุตูุฑุฉ ุงูุชู ุชุฑูุฏูุง ุจุงูุชูุตูู (ุจุงููุบุฉ ุงูุฅูุฌููุฒูุฉ ููุถู).\n"
            "ูุซุงู: `A cat wearing a wizard hat, magical forest background, highly detailed.`"
            "\n\nุฃู ููููู ุงุณุชุฎุฏุงู /cancel ููุฅูุบุงุก."
            , parse_mode=ParseMode.MARKDOWN
        )
        return TYPING_PROMPT_IMAGE

    elif action == 'cancel':
        await query.edit_message_text(
            "๐ ุชู ุงูุฅูุบุงุก. ููููู ุงูุจุฏุก ูู ุฌุฏูุฏ ุจุงุณุชุฎุฏุงู ุฃูุฑ /start."
        )
        return ConversationHandler.END # ูููู ุงููุญุงุฏุซุฉ

async def handle_prompt_ai1(update: Update, context) -> int:
    """
    ูุนุงูุฌ ุทูุจ ุงููุณุชุฎุฏู ููุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงูููุน 1.
    """
    user_message = update.message.text
    await update.message.reply_text("โณ ุฌุงุฑู ูุนุงูุฌุฉ ุทูุจู ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงูุฃูู...")

    response_text = await call_ai_type1(user_message)
    await update.message.reply_text(
        f"๐ค *ุงุณุชุฌุงุจุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงูุฃูู:*\n\n{response_text}",
        parse_mode=ParseMode.MARKDOWN
    )
    # ุจุนุฏ ุงูุฑุฏุ ุฃุนุฏ ุงููุณุชุฎุฏู ุฅูู ูุงุฆูุฉ ุงูุจุฏุก ุฃู ุฃููู ุงููุญุงุฏุซุฉ
    await start(update, context) # ุนุฑุถ ูุงุฆูุฉ ุงูุจุฏุก ูุฑุฉ ุฃุฎุฑู
    return CHOOSING_ACTION

async def handle_prompt_ai2(update: Update, context) -> int:
    """
    ูุนุงูุฌ ุทูุจ ุงููุณุชุฎุฏู ููุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงูููุน 2.
    """
    user_message = update.message.text
    await update.message.reply_text("โณ ุฌุงุฑู ูุนุงูุฌุฉ ุทูุจู ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงูุซุงูู...")

    response_text = await call_ai_type2(user_message)
    await update.message.reply_text(
        f"๐ฎ *ุงุณุชุฌุงุจุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงูุซุงูู:*\n\n{response_text}",
        parse_mode=ParseMode.MARKDOWN
    )
    await start(update, context)
    return CHOOSING_ACTION

async def handle_image_prompt(update: Update, context) -> int:
    """
    ูุนุงูุฌ ุทูุจ ุงููุณุชุฎุฏู ูุชูููุฏ ุตูุฑุฉ.
    """
    user_prompt = update.message.text
    await update.message.reply_text("โณ ุฌุงุฑู ุชูููุฏ ุตูุฑุชู... ูุฏ ูุณุชุบุฑู ูุฐุง ุจุนุถ ุงูููุช.")

    image_url = await generate_image(user_prompt)

    if image_url.startswith('http'): # ุชุญูู ุฅุฐุง ูุงูุช ุงูุงุณุชุฌุงุจุฉ ุฑุงุจุท URL
        await update.message.reply_photo(
            photo=image_url,
            caption="โจ ูุฐู ูู ุตูุฑุชู ุงูุชู ุชู ุชูููุฏูุง!"
        )
    else:
        await update.message.reply_text(
            f"โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชูููุฏ ุงูุตูุฑุฉ: {image_url}"
        )

    await start(update, context)
    return CHOOSING_ACTION

async def cancel(update: Update, context) -> int:
    """
    ูููู ุงููุญุงุฏุซุฉ.
    """
    await update.message.reply_text(
        "๐ ุชู ุงูุฅูุบุงุก. ููููู ุงูุจุฏุก ูู ุฌุฏูุฏ ุจุงุณุชุฎุฏุงู ุฃูุฑ /start."
    )
    return ConversationHandler.END

# --- ุฏุงูุฉ Main ูุชุดุบูู ุงูุจูุช ---

def main() -> None:
    """ูุดุบู ุงูุจูุช."""
    # ุจูุงุก ุชุทุจูู ุงูุจูุช
    application = Application.builder().token(BOT_TOKEN).build()

    # ุชุนุฑูู ConversationHandler ูุฅุฏุงุฑุฉ ุชุฏูู ุงููุญุงุฏุซุฉ
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)], # ููุทุฉ ุงูุฏุฎูู: ุฃูุฑ /start

        states={
            CHOOSING_ACTION: [
                CallbackQueryHandler(button_callback, pattern='^(ai_type1|ai_type2|generate_image|cancel)$'),
            ],
            TYPING_PROMPT_AI1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_prompt_ai1)],
            TYPING_PROMPT_AI2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_prompt_ai2)],
            TYPING_PROMPT_IMAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_image_prompt)],
        },

        fallbacks=[CommandHandler("cancel", cancel)], # ุงููุนุงูุฌ ุงูุงุญุชูุงุทู: ุฃูุฑ /cancel
    )

    application.add_handler(conv_handler)

    # ุฅุถุงูุฉ ูุนุงูุฌ ูู /start ุฅุฐุง ุชู ุงุณุชุฏุนุงุคู ุฎุงุฑุฌ ุงููุญุงุฏุซุฉ (ููุชุดุบูู ุงูุฌุฏูุฏ)
    application.add_handler(CommandHandler("start", start)) 

    # ุชุดุบูู ุงูุจูุช
    print("Bot started...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
